
import { create } from 'venom-bot'
import { consultar_endereco, consulta_telefone } from './controladores';


export const startBot = async () => {
    try {

        const client = await create({ session: 'Whatsapp-bot' })

        start(client)

    } catch (error) {
        console.log(error)
    }
}

// Objeto para armazenar o estado atual de cada usu√°rio //objeto com chave-valor

const usuarioEstdo: { [chave: string]: string } = {}

function start(client: any) {
    client.onMessage(async (message: any) => {
        // Verifica se a mensagem n√£o est√° vazia e n√£o √© de um grupo
        if (message.body != "" && message.isGroupMsg === false) {

            //pega o estado atual do usuario, se existir

            const estadoAtual = usuarioEstdo[message.from] || 'inicial'

            if (estadoAtual === 'inicial') {
                //Estado inicial: Pergunta comoo usu√°rio quer ser ajudado
                await client.sendText(message.from, `Ol√° ${message.notifyName}! üöõüí®\n\nBem-vindo ao assistente virtual da Domicilio Transportes! Estou aqui para facilitar suas entregas, fornecendo informa√ß√µes essenciais sobre os clientes de forma r√°pida e pr√°tica.\n\nComo posso ajudar voc√™ hoje?  \n\nüìû **1** - Consultar contatos dos clientes?  \nüè†**2** - Obter informa√ß√µes de endere√ßos?  \n\nBasta responder com o n√∫mero da op√ß√£o desejada e vamos otimizar suas entregas!`);

                //atualiza o estado do usuario

                usuarioEstdo[message.from] = 'aguardando_op√ß√£o'
            } else if (estadoAtual === 'aguardando_op√ß√£o') {
                //bot est√° aguardando uma resposta da primeira pergunta 
                if (message.body === '1') {
                    await client.sendText(message.from, 'Por favor digite o CPF do(a) cliente')
                    //Atualiza o estado para aguardando o CPF
                    usuarioEstdo[message.from] = 'aguardando_cpf_contatos'
                } else if (message.body === '2') {
                    await client.sendText(message.from, 'Por favor digite o CPF do(a) cliente')
                    usuarioEstdo[message.from] = 'aguardando_cpf_endereco'

                } else {
                    //se o usu√°rio n√£o digitar uma op√ß√£o v√°lida
                    await client.sendText(message.from, 'Por favor ,escolha uma op√ß√£o v√°lida: 1 ou 2')
                }
            } else if (estadoAtual === 'aguardando_cpf_contatos') {
                // Remove caracteres n√£o num√©ricos do CPF
                const cpf = message.body.replace(/\D/g, '');

                if (!/^\d{11}$/.test(cpf)) {
                    await client.sendText(message.from, 'CPF inv√°lido. Por favor, insira um CPF v√°lido com 11 d√≠gitos.');
                    return; // Sai da fun√ß√£o para que o usu√°rio possa tentar novamente
                }

                try {

                    const contatos = await consulta_telefone(message.body)

                    const contatosFormatados = contatos.join('\n') //retorna uma string unica usando uma nova linha como separador dos contatos

                    await client.sendText(message.from, `Segue contatos:\n${contatosFormatados}`)
                    usuarioEstdo[message.from] = 'inicial'

                } catch (error) {
                    console.log('Erro ao consultar o telefone:', error.message)
                    client.sendText(message.from, 'Nenhum dado foi encontrado para esse CPF. Verifique as informa√ß√µes e tente novamente mais tarde.')
                    usuarioEstdo[message.from] = 'inicial'
                }
            } else if (estadoAtual === 'aguardando_cpf_endereco') {

                const cpf = message.body.replace(/\D/g, '')

                if (!/^\d{11}$/.test(cpf)) {
                    await client.sendText(message.from, 'CPF inv√°lido. Por favor, insira um CPF v√°lido com 11 d√≠gitos.');
                    return; // Sai da fun√ß√£o para que o usu√°rio possa tentar novamente
                }


                try {

                    const enderecos = await consultar_endereco(message.body)
                    //verifica se o retorno √© uma string de erro
                    if (typeof enderecos === 'string') {
                        await client.sendText(message.from, enderecos)
                    } else {
                        //formata o endere√ßo em uma string leg√≠vel para o usuario

                        const enderecoFormatado = enderecos.map(item => `${item.chave} ${item.valor}`).join('\n')

                        await client.sendText(message.from, `Segue Endere√ßo:\n${enderecoFormatado}`)

                    }

                    usuarioEstdo[message.from] = 'inicial'


                } catch (error) {
                    console.log('Erro ao consultar o telefone:', error)
                    client.sendText(message.from, 'Nenhum dado foi encontrado para esse CPF. Verifique as informa√ß√µes e tente novamente mais tarde.')
                    usuarioEstdo[message.from] = 'inicial'
                }

            }



        }
    });
}







